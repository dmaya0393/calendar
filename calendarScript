import {BS_CALENDAR_DATA} from './constants.js'

const LEAP_YEAR_MONTHLY_DAYS_COUNT = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
const NON_LEAP_YEAR_MONTHLY_DAYS_COUNT = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

const AD_YEAR_LIMITS = [1944, 2043]



const leapYearCheck = (year) =>{
    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)
}

const readAD = () =>{
    const element = document.querySelector('.ad-input')
    let bs_date;
    element.addEventListener('input', ()=>{
        let isAlertShown = false
        const adDate = element.value

        setTimeout(() =>{
            if(adDate.length === 10 && !isAlertShown){
                isAlertShown = true
                if(validateAD_Date(adDate)){
                    const {year, month, date} = convert_AD_to_BS(adDate)
                    if(validateAgainst_BS_Limits(month, date, year)){
                        bs_date = `${month}-${date}-${year}`
                        const bs_date_element = document.querySelector('.bs-output')
                        bs_date_element.value= bs_date
                    }
                }else{
                    alert('Reject Case')
                }
            }
        }, 1)

    })
}


const validateAD_Date = (adDate)=>{
    const {month, date, year} = breakDate(adDate)
    return validateAgainst_AD_Limits(month, date, year)
}

const validateAgainst_AD_Limits = (monthValue, dateValue, yearValue) =>{
    const monthDayCount = monthlyDayCount(yearValue, monthValue)

    return (
        (Number(yearValue) < AD_YEAR_LIMITS[0] || 
        Number(yearValue) > AD_YEAR_LIMITS[1] || 
        Number(monthValue) === 0 ||
        Number(monthValue) > 12 || 
        Number(dateValue) === 0 ||
        Number(dateValue) > monthDayCount) 
        ? false 
        : true
    );
}

const validateAgainst_BS_Limits = (month, date, year)=>{
    // console.log('CHECK', month, date, year)
    const yearIterationAdjuster = year - 2000
    if(yearIterationAdjuster < 0 || yearIterationAdjuster > 99){
        alert('Ran into outbound year case.')
        return false
    }
    if(month < 1 || month > 12){
        alert('Ran into outbound month')
        return false
    }
    const [monthDays] = BS_CALENDAR_DATA[yearIterationAdjuster]
    const noOfDays = monthDays[month-1]

    if(date < 1 || date > noOfDays){
        alert('Ran into outbound date.')
        return false
    }

    return true
}

const breakDate = (adDate) =>{
    const parts = adDate.split(/[-\/\s]/);
    return {month: parts[0], date: parts[1], year: parts[2]}
}

const monthlyDayCount = (year, month) =>{
    return leapYearCheck(year) ? LEAP_YEAR_MONTHLY_DAYS_COUNT[month-1] : NON_LEAP_YEAR_MONTHLY_DAYS_COUNT[month-1]
}

const daysCount_From_1943_04_14_till_input_date = (month, date, year) =>{
    let onsetYear = 1944
    let onsetMonth = 1
    let onsetDate = 1
    // daysCount is starting from 262 because from 1943 04 14 we have 261 days in the year 1943 itself.
    // the loop below calculates days diff from only 01 01 1944.
    // so 261 days of 1943 and 1 for the first day of 1944 we are using 262 as daysCount initial value
    let daysCount = 261
    let i = 1
    let breakFlag = false

    date = Number(date)
    month = Number(month)
    year = Number(year)

    while(!breakFlag){
        const monthlyDaysArray = leapYearCheck(onsetYear) ? LEAP_YEAR_MONTHLY_DAYS_COUNT : NON_LEAP_YEAR_MONTHLY_DAYS_COUNT
        while(onsetMonth <= 12 && !breakFlag){
            while( onsetDate <= monthlyDaysArray[onsetMonth-1] && !breakFlag){
                if( onsetDate === date && onsetMonth === month && onsetYear === year){
                    breakFlag = true
                }

                onsetDate++
                daysCount++
                i++
            }
            onsetDate = 1
            onsetMonth++
        }
        onsetMonth = 1
        onsetYear++
    }
    return daysCount
}

const AD_daysCount_to_BS_Date = (daysCount) =>{

    let year= 0, month=0, date=1, breakFlag;

    while(!breakFlag){
        const [yearData, totalDaysOfYear] = BS_CALENDAR_DATA[year]
        if(daysCount > totalDaysOfYear){
            daysCount = daysCount - totalDaysOfYear
        } else{
            while(month <= 11 && !breakFlag){
                if(daysCount > yearData[month]){
                    daysCount = daysCount - yearData[month]
                } else{
                    while(daysCount !== 0){
                        daysCount--
                        date++
                        if(daysCount === 0)
                            breakFlag = true
                    }
                }
                month++
            }
        }
        year++
    }
    // case of ++ operator thing i dont understand
    year = year + 1999
    return {year, month, date}
}

const convert_AD_to_BS = (adDate) =>{
    const {month, date, year} = breakDate(adDate)
    return AD_daysCount_to_BS_Date(daysCount_From_1943_04_14_till_input_date(month, date, year))
}


const clearData = () =>{
    const outputElement = document.querySelector('.bs-output')
    const clearBtnElement = document.querySelector('.clear')

    clearBtnElement.addEventListener('click', () =>{
        outputElement.value = ''
    })
}

const dateFormatter = () => {
    const dateStringElement = document.querySelector('.bs-output');
    const buttons = document.querySelectorAll('.space, .hyphen, .slash');

    const separatorMap = {
        'space': ' ',
        'hyphen': '-',
        'slash': '/'
    };

    buttons.forEach(button => {
        button.addEventListener('click', (event) => {
            const dateString = dateStringElement.value;
            const buttonClass = event.target.className;
            const formattingChar = separatorMap[buttonClass];

            const formattedDate = formatDate(dateString, formattingChar);
            dateStringElement.value = formattedDate;
        });
    });
}

const formatDate = (dateString, formattingChar) =>{
    const parts = dateString.split(/[-\/\s]/);
    return `${parts[0]}${formattingChar}${parts[1]}${formattingChar}${parts[2]}`
}



const readBS =()=>{
    const element = document.querySelector('.bs-input')
    let ad_date;
    element.addEventListener('input', ()=>{
        let isAlertShown = false
        const bsDate = element.value
        setTimeout(() =>{
            if(bsDate.length === 10 && !isAlertShown){
                isAlertShown = true
                const {month, date, year} = breakDate(bsDate)
                if(validateAgainst_BS_Limits(month, date, year)){
                    convert_BS_to_AD(month, date, year)
                    // const {year, month, date} = convert_AD_to_BS(bsDate)
                    // if(validateAgainst_BS_Limits(month, date, year)){
                    //     ad_date = `${month}-${date}-${year}`
                    //     const ad_date_element = document.querySelector('.ad-output')
                    //     ad_date_element.value= ad_date
                    // }
                }else{
                    alert('Reject Case')
                }
            }
        }, 1)

    })
}

const BS_days_count = (month, date, year) =>{
    // console.log(month, date, year)
    let daysCount = 0;

    const yearIndexInBS_CALENDAR_DATA = year - 1999
    // console.log('Index', yearIndexInBS_CALENDAR_DATA)

    let i = 0
    while(i < yearIndexInBS_CALENDAR_DATA){

        const yearCalendar = BS_CALENDAR_DATA[i]
        const [monthlyDays, totalDays] = yearCalendar
        // console.log('Year', monthlyDays, totalDays)

        if(i+1 === yearIndexInBS_CALENDAR_DATA){
            // console.log('In the year')
            let j = 0
            while(j < month){
                if(j+1 === Number(month)){
                    // console.log('In the month')
                    let k = 1
                    while(k <= date){
                        daysCount++
                        k++
                    }
                }else{
                    // console.log('Take whole days')
                    daysCount = daysCount + monthlyDays[j]
                }
                j++
            }
        } else{
            // console.log('Take whole days')
            daysCount = daysCount + totalDays
        }



        i++
        // console.log(i)
    }
    // console.log('Days', daysCount)
    return daysCount;
}

const get_AD_Date_From_BS_Days_Count = (daysCount) =>{
    daysCount = daysCount + 103
    let baseYear = 1943
    let ad_Month = 0
    let breakYearlyIteration = false

    while(!breakYearlyIteration){
        const yearlyTotalDays = (leapYearCheck(baseYear) ? 366 : 365)
        while(daysCount > yearlyTotalDays){
            const yearlyTotalDays = (leapYearCheck(baseYear) ? 366 : 365)
            daysCount = daysCount - yearlyTotalDays
            baseYear++
        }

        if(daysCount < yearlyTotalDays)
            breakYearlyIteration = true
    }


    const monthlyDaysArray = leapYearCheck(baseYear) ? LEAP_YEAR_MONTHLY_DAYS_COUNT : NON_LEAP_YEAR_MONTHLY_DAYS_COUNT 
            while(daysCount > monthlyDaysArray[ad_Month]){
                console.log('Check For', daysCount, monthlyDaysArray[ad_Month])
                daysCount = daysCount - monthlyDaysArray[ad_Month]
                ad_Month % 12
                ad_Month++
                console.log('Rem Days', daysCount)
            }

    return {adYear: baseYear, adMonth: ad_Month + 1, adDate: daysCount}
}

const convert_BS_to_AD = (month, date, year) =>{
    console.log('Initiating Conversion')
    const BS_date_days_count = BS_days_count(month, date, year)
    const {adYear, adMonth, adDate} = get_AD_Date_From_BS_Days_Count(BS_date_days_count)
    console.log(adYear, adMonth, adDate)
}

document.addEventListener('DOMContentLoaded', () => {
    readAD()
    clearData()
    dateFormatter()
    readBS()
})

